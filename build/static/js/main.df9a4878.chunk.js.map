{"version":3,"sources":["Cell.js","Board.js","Music.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","makeTable","defaultProps","getTime","time","isNaN","floor","slice","Music","currentSong","music","currentTime","duration","playlist","id","title","url","item","class","src","alt","ref","prevProps","prevState","track","play","pause","_this3","addEventListener","e","target","removeEventListener","React","App","src_Board_0","src_Music_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df9a4878.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols:5,\n    chanceLightStartsOn:0.25\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon:false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y= 0; y < this.props.nrows; y++){\n      let row = [];\n      for (let x = 0; x < this.props.ncols;x++){\n        row.push(Math.random()< this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n     flipCell(y,x);\n     flipCell(y,x-1);\n     flipCell(y,x+1);\n     flipCell(y-1,x);\n     flipCell(y+1,x);\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    let hasWon = board.every(row => row.every(cell=> !cell));\n    this.setState({board:board, hasWon:hasWon});\n  }\n\n\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  \n\n  /** Render game board or winning message. */\n\n  render() {\n  \n    return (\n      <div>\n        { this.state.hasWon ?(\n      <div className=\"winner\">\n        <span className=\" neon-blue\">YOU</span>\n        <span className=\" neon-orange\">WIN! </span>\n    </div>\n        ):(\n          <div>\n        <div className=\"Board-title\">\n        <div className=\" neon-orange\">Lights </div>\n        <div className=\" neon-blue\">Out </div>\n\n        </div>\n        {this.makeTable()}\n        </div>\n        )}\n     </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React from \"react\";\nimport \"./Music.css\";\n\nconst goeasy = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\nconst dreams = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3\";\n\nconst chillout =\n  \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-10.mp3\";\n\nconst twistter =\n  \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-13.mp3\";\n\nconst freebird =\n  \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-15.mp3\";\n\n\nfunction getTime(time) {\n  if (!isNaN(time)) {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  }\n}\n\n\nclass Music extends React.Component {\n    state = {\n      currentSong: null,\n      music: \"stopped\",\n      currentTime: null,\n      duration: null\n    };\n  \n    render() {\n      const currentTime = getTime(this.state.currentTime);\n      const duration = getTime(this.state.duration);\n      const playlist = [\n        {\n          id: 1,\n          title: \"Go Easy\",\n          url:\n            \"https://thumbs-prod.si-cdn.com/Vj7Cmc62xkQLwQZLiX1SbOV89ik=/420x240/https://public-media.si-cdn.com/filer/cd/0e/cd0efbec-bc15-4f38-894a-7e0e6f5968b8/campfire_edit.jpg\"\n        },\n        {\n          id: 2,\n          title: \"Dreams\",\n          url:\n            \"https://images.pexels.com/photos/96380/pexels-photo-96380.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500\"\n        },\n        {\n          id: 3,\n          title: \"Chill Out\",\n          url:\n            \"https://scontent.fbom11-1.fna.fbcdn.net/v/t1.0-9/54433190_2258561064201100_2218823514348060672_o.jpg?_nc_cat=107&_nc_ohc=14CJbrdmXusAQkPOoL9gbVg6VtyPIqSwXK7UiPTZ2llwMbExe7PuES1Ag&_nc_ht=scontent.fbom11-1.fna&oh=f5dde330f28bb39b984dcfb88cded3a2&oe=5EA792C6\"\n        },\n        {\n          id: 4,\n          title: \"Twistter\",\n          url: \"https://i.ytimg.com/vi/VJ52yJwN_K0/maxresdefault.jpg\"\n        },\n        {\n          id: 5,\n          title: \"Free Bird\",\n          url:\n            \"https://www.laurenswilliam.nl/wp-content/uploads/2016/09/Chill-music-update-1.jpeg\"\n        }\n      ].map(item => {\n        return (\n          <div class=\"ui list\">\n            <div class=\"item\">\n              <img class=\"ui avatar image\" src={item.url} alt=\"music images\" />\n              <div class=\"content\">\n                <li\n                  className=\"title\"\n                  key={item.id}\n                  onClick={() => this.setState({ currentSong: item.title })}\n                >\n                  {item.title}\n                </li>\n              </div>\n            </div>\n          </div>\n        );\n      });\n  \n      return (\n        \n         \n          <div className=\"App\">\n            <div className=\"ui card main-container\">\n              <div className=\"info-container\">\n                {this.state.music === \"playing\" ? (\n                  <div className=\"current-song\">\n                    Now Playing {this.state.currentSong}\n                  </div>\n                ) : null}\n                {this.state.music === \"paused\" ? (\n                  <div className=\"current-song\">\n                    {this.state.currentSong} is paused{\" \"}\n                  </div>\n                ) : null}\n                {this.state.music === \"playing\" ||\n                this.state.music === \"paused\" ? (\n                  <div>\n                    {currentTime} / {duration}\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </div>\n              <div className=\"button-container\">\n                {this.state.music === \"paused\" && (\n                  <button\n                    class=\"ui labeled icon red button\"\n                    onClick={() => this.setState({ music: \"playing\" })}\n                  >\n                    <i class=\" large play circle outline icon\" />\n                    Play\n                  </button>\n                )}\n                {this.state.music === \"playing\" && (\n                  <button\n                    class=\"ui labeled icon red button\"\n                    onClick={() => this.setState({ music: \"paused\" })}\n                  >\n                    <i class=\"large pause circle outline icon\" />\n                    Pause\n                  </button>\n                )}\n                {this.state.music === \"playing\" ||\n                this.state.music === \"paused\" ? (\n                  <button\n                    class=\"ui labeled icon button\"\n                    onClick={() => this.setState({ music: \"stop\" })}\n                  >\n                    <i class=\"large stop circle outline icon\" />\n                    Stop\n                  </button>\n                ) : null}\n              </div>\n  \n              <div className=\"playlist\">{playlist}</div>\n  \n              <audio ref={ref => (this.music = ref)} />\n            </div>\n          </div>\n    \n      );\n    }\n  \n    componentDidUpdate(prevProps, prevState) {\n      if (this.state.currentSong !== prevState.currentSong) {\n        let track;\n        switch (this.state.currentSong) {\n          case \"Go Easy\":\n            track = goeasy;\n            break;\n          case \"Dreams\":\n            track = dreams;\n            break;\n          case \"Chill Out\":\n            track = chillout;\n            break;\n          case \"Twistter\":\n            track = twistter;\n            break;\n          case \"Free Bird\":\n            track = freebird;\n            break;\n          default:\n            break;\n        }\n  \n        if (track) {\n          this.music.src = track;\n          this.music.play();\n          this.setState({\n            music: \"playing\"\n          });\n        }\n      }\n  \n      if (this.state.music !== prevState.music) {\n        if (this.state.music === \"paused\") {\n          this.music.pause();\n        }\n        if (this.state.music === \"playing\" && prevState.music === \"paused\") {\n          this.music.play();\n        }\n        if (this.state.music === \"stop\") {\n          this.music.pause();\n          this.currentTime = 0;\n          this.setState({\n            currentSong: null\n          });\n        }\n      }\n    }\n  \n    componentDidMount() {\n      this.music.addEventListener(\"timeupdate\", e => {\n        this.setState({\n          currentTime: e.target.currentTime,\n          duration: e.target.duration\n        });\n      });\n    }\n  \n    componentWillUnmount() {\n      this.music.removeEventListener(\"timeupdate\", () => {});\n    }\n  }\n \nexport default Music;","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport Music from \"./Music\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n        <Music />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}